"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinataIPFS = exports.PinataUploadResponse = exports.PinataFileDetails = exports.IPFS_JWT_ENV = exports.IPFS_API_SECRET_ENV = exports.IPFS_API_KEY_ENV = exports.IPFS_GATEWAY_ENV = exports.IPFS_NFT_STORAGE_LINK = exports.IPFS_PINATA_CLOUD_LINK = exports.IPFS_4EVERLAND_LINK = exports.IPFS_TRUSTLESS_GATEWAY_LINK = exports.IPFS_W3S_LINK = exports.IPFS_DWEB_LINK = exports.IPFS_LINK = void 0;
const interfaces_1 = require("./interfaces");
exports.IPFS_LINK = "https://ipfs.io";
exports.IPFS_DWEB_LINK = "https://dweb.link";
exports.IPFS_W3S_LINK = "https://w3s.link";
exports.IPFS_TRUSTLESS_GATEWAY_LINK = "https://trustless-gateway.link";
exports.IPFS_4EVERLAND_LINK = "https://4everland.io";
exports.IPFS_PINATA_CLOUD_LINK = "https://gateway.pinata.cloud";
exports.IPFS_NFT_STORAGE_LINK = "https://nftstorage.link";
exports.IPFS_GATEWAY_ENV = "IPFS_GATEWAY";
exports.IPFS_API_KEY_ENV = "IPFS_API_KEY";
exports.IPFS_API_SECRET_ENV = "IPFS_API_SECRET_KEY";
exports.IPFS_JWT_ENV = "IPFS_JWT";
class PinataFileDetails {
    constructor() {
        this.acceptDuplicates = false;
        this.isDuplicate = false;
        this.id = "";
        this.userId = "";
        this.name = "";
        this.cid = "";
        this.size = 0;
        this.numberOfFiles = 0;
        this.mimeType = "";
        this.groupId = null;
        this.createdAt = "";
        this.updatedAt = "";
        this.network = "";
        this.streamable = false;
        this.vectorized = false;
    }
}
exports.PinataFileDetails = PinataFileDetails;
class PinataUploadResponse {
    constructor() {
        this.data = new PinataFileDetails();
    }
}
exports.PinataUploadResponse = PinataUploadResponse;
class PinataIPFS {
    static new() {
        return new PinataIPFS();
    }
    async upload(opts) {
        const { name, data, token } = opts;
        const url = "https://uploads.pinata.cloud/v3/files";
        const formData = new FormData();
        const filePart = new Blob([data.toString()], { type: "text/plain" });
        formData.append("file", filePart, name);
        formData.append("network", "public");
        try {
            const response = await fetch(url, {
                method: "POST",
                body: formData,
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new interfaces_1.StorageError(`Pinata IPFS API error: ${errorText}`);
            }
            const resp = (await response.json());
            return PinataFileDetailsToMetadata(resp.data);
        }
        catch (error) {
            throw new interfaces_1.StorageError(`Upload error: ${error}`);
        }
    }
    async getShareLink(opts) {
        return `https://gateway.pinata.cloud/ipfs/${opts.id}?download=true`;
    }
    storageType() {
        return interfaces_1.StorageType.IPFS;
    }
}
exports.PinataIPFS = PinataIPFS;
function PinataFileDetailsToMetadata(pinataFileDetails) {
    return {
        id: pinataFileDetails.cid,
        name: pinataFileDetails.name,
        size: pinataFileDetails.size,
        modifiedTime: pinataFileDetails.updatedAt || null,
    };
}
