"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettlementData = exports.ProofData = void 0;
const web3_1 = require("web3");
class ProofData {
    constructor(id, score, fileUrl, proofUrl) {
        this.id = id;
        this.score = score;
        this.fileUrl = fileUrl;
        this.proofUrl = proofUrl;
    }
    abiEncode() {
        const web3 = new web3_1.Web3();
        return web3.eth.abi.encodeParameter({
            components: [
                { name: "id", type: "uint256" },
                { name: "score", type: "uint256" },
                { name: "fileUrl", type: "string" },
                { name: "proofUrl", type: "string" },
            ],
            name: "data",
            type: "tuple",
        }, {
            id: this.id,
            score: this.score,
            fileUrl: this.fileUrl,
            proofUrl: this.proofUrl,
        });
    }
}
exports.ProofData = ProofData;
class SettlementData {
    constructor(id, user, cost, nonce, userSignature) {
        this.id = id;
        this.user = user;
        this.cost = cost;
        this.nonce = nonce;
        this.userSignature = userSignature;
    }
    abiEncode() {
        const web3 = new web3_1.Web3();
        return web3.eth.abi.encodeParameter({
            components: [
                { name: "id", type: "string" },
                { name: "user", type: "adress" },
                { name: "cost", type: "address" },
                { name: "nonce", type: "uint256" },
                { name: "userSignature", type: "bytes" },
            ],
            name: "data",
            type: "tuple",
        }, {
            id: this.id,
            user: this.user,
            cost: this.cost,
            nonce: this.nonce,
            userSignature: this.userSignature,
        });
    }
}
exports.SettlementData = SettlementData;
