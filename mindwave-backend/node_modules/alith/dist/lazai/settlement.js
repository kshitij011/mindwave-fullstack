"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettlementRequest = exports.SettlementSignature = void 0;
const web3_1 = __importDefault(require("web3"));
const request_1 = require("./request");
class SettlementSignature {
    constructor(user, nonce, signature, file_id) {
        this.user = user;
        this.nonce = nonce;
        this.signature = signature;
        this.file_id = file_id;
    }
    toRequestHeaders() {
        return {
            [request_1.USER_HEADER]: this.user,
            [request_1.NONCE_HEADER]: this.nonce.toString(),
            [request_1.SIGNATURE_HEADER]: this.signature,
            [request_1.FILE_ID_HEADER]: this.file_id !== undefined && this.file_id !== null
                ? this.file_id.toString()
                : "",
        };
    }
}
exports.SettlementSignature = SettlementSignature;
class SettlementRequest {
    constructor(nonce, user, node, file_id) {
        this.nonce = nonce;
        this.user = user;
        this.node = node;
        this.file_id = file_id;
    }
    abiEncode() {
        const web3 = new web3_1.default();
        return web3.eth.abi.encodeParameters(["uint256", "address", "address"], [this.nonce, this.user, this.node]);
    }
    generateSignature(privateKey) {
        const messageHash = web3_1.default.utils.keccak256(this.abiEncode());
        const web3 = new web3_1.default();
        const signedMessage = web3.eth.accounts.sign(messageHash, privateKey);
        return new SettlementSignature(this.user, this.nonce, signedMessage.signature, this.file_id);
    }
}
exports.SettlementRequest = SettlementRequest;
