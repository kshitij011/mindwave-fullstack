"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseArgs = exports.Extractor = void 0;
const zod_1 = require("zod");
const agent_1 = require("./agent");
class Extractor {
    constructor(agent, model) {
        this.agent = agent;
        this.model = model;
    }
    async extract(input) {
        const agent = new agent_1.Agent({
            name: this.agent.name(),
            model: this.agent.model(),
            preamble: `Extract the data structure from the input string.
Note you MUST use the tool named 'extractor' to extract the input string to the
data structure.
        `,
            baseUrl: this.agent.baseUrl(),
            apiKey: this.agent.apiKey(),
            tools: [
                {
                    name: "extractor",
                    description: "Extract the data structure from the input string.",
                    parameters: this.model,
                    handler: (...args) => parseArgs(this.model, ...args),
                },
            ],
        });
        const result = await agent.prompt(input);
        return this.model.parse(JSON.parse(result));
    }
}
exports.Extractor = Extractor;
function parseArgs(argsSchema, ...args) {
    // If the schema is an object, parse the arguments into an object
    if (isZodObject(argsSchema)) {
        const properties = argsSchema.shape;
        const argsObject = {};
        let index = 0;
        for (const key in properties) {
            if (properties.hasOwnProperty(key)) {
                if (index >= args.length) {
                    const defaultValue = getDefaultValue(properties[key], args[index]);
                    argsObject[key] = defaultValue;
                }
                else {
                    argsObject[key] = args[index];
                }
                index++;
            }
        }
        return argsSchema.parse(argsObject);
    }
    // If the schema is not an object, parse the arguments directly
    return argsSchema.parse(args[0]);
}
exports.parseArgs = parseArgs;
function isZodObject(schema) {
    return (schema instanceof zod_1.z.ZodObject ||
        (schema?._def && schema._def.typeName === "ZodObject") ||
        (typeof schema.shape === "function" &&
            schema.shape().constructor.name === "Object"));
}
function getDefaultValue(zodType, value) {
    if (zodType instanceof zod_1.z.ZodString) {
        return "";
    }
    if (zodType instanceof zod_1.z.ZodNumber) {
        return 0;
    }
    if (zodType instanceof zod_1.z.ZodBoolean) {
        return false;
    }
    return parseArgs(zodType, value);
}
