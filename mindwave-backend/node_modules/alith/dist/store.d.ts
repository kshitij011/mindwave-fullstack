import { QdrantClient, QdrantClientParams } from "@qdrant/js-client-rest";
import type { Embeddings } from "./embeddings";
interface Store {
    /**
     * Searches the storage with a query, limiting the results and applying a threshold.
     *
     * @param query - The search query.
     * @param limit - The maximum number of results to return.
     * @param scoreThreshold - The minimum score threshold for results.
     * @returns A list of results matching the query.
     */
    search(query: string, limit?: number, scoreThreshold?: number): Promise<string[]>;
    /**
     * Saves a value into the storage.
     *
     * @param value - The value to save.
     */
    save(value: string): Promise<void>;
    /**
     * Resets the storage by clearing all stored data.
     */
    reset(): Promise<void>;
}
declare class QdrantStore implements Store {
    private client;
    private collectionName;
    private embeddings;
    constructor(embeddings: Embeddings, collectionName?: string, params?: QdrantClientParams);
    search(query: string, limit?: number, scoreThreshold?: number): Promise<string[]>;
    save(value: string): Promise<void>;
    reset(): Promise<void>;
    saveDocs(values: string[]): Promise<void>;
    private embedTexts;
}
export { type Store, QdrantStore, QdrantClient, QdrantClientParams };
