import type { Memory } from "./memory";
import type { Store } from "./store";
import { type Tool } from "./tool";
type AgentOptions = {
    name?: string;
    model?: string;
    preamble?: string;
    baseUrl?: string;
    apiKey?: string;
    tools?: Array<Tool>;
    mcpConfigPath?: string;
    store?: Store;
    memory?: Memory;
    extraHeaders?: Record<string, string>;
};
declare class Agent {
    private _agent;
    private _opts;
    private _store?;
    private _memory?;
    /**
     * Creates an instance of Agent.
     * @param {AgentOptions} opts - The configuration object for the agent.
     * @param {string} opts.name - Optional agent name.
     * @param {string} opts.model - The model used by the agent.
     * @param {string} opts.preamble - Optional introductory text or context for the agent.
     * @param {string} [opts.baseUrl] - Optional base URL for API requests.
     * @param {string} [opts.apiKey] - Optional API key for authentication.
     * @param {Array<Tool>} [opts.tools] - Optional list of tools available to the agent.
     * @param {string} [opts.mcpConfigPath] - Optional mcp config path.
     * @param {Store} [opts.store] - Optional store for the knowledge index.
     * @param {Memory} [opts.memory] - Optional memory for the agent conversation context.
     */
    constructor(opts: AgentOptions);
    /**
     * Processes a prompt using the agent's tools and model.
     * @param {string} prompt - The input prompt to process.
     * @returns {string} - The result of processing the prompt.
     */
    prompt(prompt: string): Promise<string>;
    /**
     * Returns the name of the agent.
     * @returns {string} - The name of the agent.
     */
    name(): string;
    /**
     * Returns the model used by the agent.
     * @returns {string} - The model used by the agent.
     */
    model(): string;
    /**
     * Returns the preamble of the agent.
     * @returns {string} - The preamble of the agent.
     */
    preamble(): string | undefined;
    /**
     * Returns the base url of the agent.
     * @returns {string} - The base url of the agent.
     */
    baseUrl(): string | undefined;
    /**
     * Returns the API key of the agent.
     * @returns {string} - The API key of the agent.
     */
    apiKey(): string | undefined;
}
export { Agent, type AgentOptions };
