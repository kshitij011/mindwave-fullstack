/**
 * Alith Phala TEE Integration & SDK. This SDK provides a Rust client for communicating with the Tappd server,
 * which is available inside Phala Network DStack.
 *
 * For local development without TDX devices, you can use the simulator available for download here:
 * https://github.com/Leechael/tappd-simulator/releases and then set the environment variable `DSTACK_SIMULATOR_ENDPOINT`
 *
 * Leave the endpoint parameter empty for the tappd client in production. You only need to add volumes in your
 * docker-compose file to run Confidential Virtual Machines (CVMs):
 *
 * ```yaml
 *   volumes:
 *   - /var/run/tappd.sock:/var/run/tappd.sock
 * ```
 */
import { TappdClient, type TdxQuoteHashAlgorithms, type TappdInfoResponse } from "@phala/dstack-sdk";
/**
 * TEE Configuration for Alith agents
 */
export interface TEEConfig {
    endpoint?: string;
    enableAttestation?: boolean;
    enableKeyDerivation?: boolean;
    enableSignatures?: boolean;
    timeout?: number;
}
/**
 * TEE Attestation Result containing cryptographic proof
 */
export interface TEEAttestation {
    quote: string;
    eventLog: string;
    rtmrs: string[];
    verified: boolean;
    timestamp: Date;
}
/**
 * TEE Key Derivation Result
 */
export interface TEEDerivedKey {
    key: string;
    certificateChain: string[];
    keyPath: string;
    signature?: string;
}
/**
 * TEE Execution Result with verification
 */
export interface TEEExecutionResult<T = unknown> {
    result: T;
    signature: string;
    attestation?: TEEAttestation;
    verified: boolean;
}
/**
 * Phala TEE Client for secure AI agent execution
 * Provides TEE-based security guarantees for sensitive AI operations
 */
export declare class TEEClient {
    private client;
    private config;
    constructor(config?: TEEConfig);
    /**
     * Get TEE environment information
     */
    getInfo(): Promise<TappdInfoResponse>;
    /**
     * Generate remote attestation for the current TEE environment
     * This proves the code is running in a genuine, uncompromised TEE
     */
    generateAttestation(userData?: string, hashAlg?: TdxQuoteHashAlgorithms): Promise<TEEAttestation>;
    /**
     * Derive a cryptographic key within the TEE
     * Keys never leave the secure environment
     */
    deriveKey(path?: string, userData?: string): Promise<TEEDerivedKey>;
    /**
     * Execute a function within TEE with cryptographic verification
     * This is the core method for secure AI operations
     */
    executeSecure<T>(operation: () => Promise<T> | T, options?: {
        attestUserData?: string;
        signResult?: boolean;
        includeAttestation?: boolean;
    }): Promise<TEEExecutionResult<T>>;
    /**
     * Verify a TEE execution result
     */
    verifyExecution<T>(execution: TEEExecutionResult<T>): Promise<boolean>;
    /**
     * Create a secure communication channel using TEE-derived keys
     */
    createSecureChannel(): Promise<{
        localKey: TEEDerivedKey;
        channelId: string;
        encrypt: (data: string) => string;
        decrypt: (data: string) => string;
    }>;
    private hashResult;
    private signWithTEE;
    private verifySignature;
    private verifyAttestation;
    /**
     * Get TEE client status and health information
     */
    getStatus(): Promise<{
        healthy: boolean;
        endpoint: string;
        features: {
            attestation: boolean;
            keyDerivation: boolean;
            signatures: boolean;
        };
        lastAttestation?: Date;
    }>;
}
/**
 * TEE-enabled agent wrapper
 * Provides a simplified interface for agents to use TEE capabilities
 */
export declare class TEEAgent {
    private teeClient;
    private agentId;
    constructor(agentId: string, teeConfig?: TEEConfig);
    /**
     * Execute an operation securely within TEE
     */
    executeSecurely<T>(operation: () => Promise<T> | T, options?: {
        attestUserData?: string;
        signResult?: boolean;
        includeAttestation?: boolean;
    }): Promise<TEEExecutionResult<T>>;
    /**
     * Generate agent-specific attestation
     */
    generateAgentAttestation(): Promise<TEEAttestation>;
    /**
     * Create secure communication channel for this agent
     */
    createSecureChannel(): Promise<ReturnType<TEEClient["createSecureChannel"]>>;
    /**
     * Get TEE status for this agent
     */
    getStatus(): Promise<ReturnType<TEEClient["getStatus"]>>;
}
export { TappdClient };
