export declare const DEFAULT_MARLIN_ATTESTATION_ENDPOINT = "http://127.0.0.1:1350";
export declare const MARLIN_ATTESTATION_ENDPOINT_ENV = "MARLIN_ATTESTATION_ENDPOINT";
/**
 * Comprehensive error enumeration for Marlin client operations.
 * Encapsulates HTTP and JSON parsing errors.
 */
export declare class MarlinError extends Error {
    readonly type: "HttpError" | "JsonError";
    constructor(type: "HttpError" | "JsonError", message: string);
}
/**
 * Convenience type alias for Marlin client results.
 */
export type Result<T> = Promise<{
    success: true;
    data: T;
} | {
    success: false;
    error: MarlinError;
}>;
/**
 * Attestation request structure.
 * Contains optional public key, user data, and nonce.
 */
export declare class AttestationRequest {
    publicKey?: Uint8Array;
    userData?: Uint8Array;
    nonce?: Uint8Array;
    constructor(publicKey?: Uint8Array, userData?: Uint8Array, nonce?: Uint8Array);
}
/**
 * Main Marlin client class.
 * Manages connections to Marlin services and provides methods for common operations.
 */
export declare class MarlinClient {
    private client;
    private endpoint;
    /**
     * Create a new Marlin client instance.
     *
     * Automatically selects connection method based on endpoint:
     * - HTTP/HTTPS URLs: Standard network connection
     * - Default behavior (no endpoint specified):
     *   1. Check environment variable `MARLIN_ATTESTATION_ENDPOINT`
     *   2. Fall back to `http://127.0.0.1:1350`
     */
    constructor(endpoint?: string);
    /**
     * Generate a remote attestation with the public key and user data.
     * @param req Attestation request containing public key, user data, and nonce
     * @returns Promise resolving to the attestation result
     */
    attestationHex(req: AttestationRequest): Promise<string>;
}
export default MarlinClient;
