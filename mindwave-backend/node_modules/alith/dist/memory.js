"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowBufferMemory = exports.MessageBuilder = void 0;
class MessageBuilder {
    static newHumanMessage(content) {
        return { role: "user", content };
    }
    static newSystemMessage(content) {
        return { role: "system", content };
    }
    static newToolMessage(content) {
        return { role: "tool", content };
    }
    static newAIMessage(content) {
        return { role: "assistant", content };
    }
    static messagesFromValue(value) {
        let parsed;
        if (typeof value === "string") {
            parsed = JSON.parse(value);
        }
        else if (!Array.isArray(value)) {
            parsed = [value];
        }
        else {
            parsed = value;
        }
        return parsed.map((item) => {
            return { role: item.role, content: item.content };
        });
    }
    static messagesToString(messages) {
        return messages.map((msg) => `${msg.role}: ${msg.content}`).join("\n");
    }
}
exports.MessageBuilder = MessageBuilder;
class WindowBufferMemory {
    constructor(windowSize = 10) {
        this.windowSize = windowSize;
        this.storage = [];
    }
    messages() {
        return [...this.storage];
    }
    addUserMessage(message) {
        this.addMessage(MessageBuilder.newHumanMessage(message));
    }
    addAIMessage(message) {
        this.addMessage(MessageBuilder.newAIMessage(message));
    }
    addMessage(message) {
        if (this.storage.length >= this.windowSize) {
            this.storage.shift();
        }
        this.storage.push(message);
    }
    clear() {
        this.storage = [];
    }
    toString() {
        return this.messages()
            .map((msg) => `${msg.role}: ${msg.content}`)
            .join("\n");
    }
}
exports.WindowBufferMemory = WindowBufferMemory;
