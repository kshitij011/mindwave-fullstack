"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QdrantClient = exports.QdrantStore = void 0;
const js_client_rest_1 = require("@qdrant/js-client-rest");
Object.defineProperty(exports, "QdrantClient", { enumerable: true, get: function () { return js_client_rest_1.QdrantClient; } });
class QdrantStore {
    constructor(embeddings, collectionName = "alith", params) {
        this.embeddings = embeddings;
        this.client = new js_client_rest_1.QdrantClient(params);
        this.collectionName = collectionName;
    }
    async search(query, limit = 3, scoreThreshold = 0.4) {
        const queryVectors = await this.embedTexts([query]);
        const searchResult = await this.client.search(this.collectionName, {
            vector: queryVectors[0],
            limit,
            score_threshold: scoreThreshold,
        });
        return searchResult.map((point) => point.payload?.text);
    }
    async save(value) {
        const vectors = await this.embedTexts([value]);
        await this.client.upsert(this.collectionName, {
            points: [
                {
                    id: Math.random().toString(36).substring(7),
                    vector: vectors[0],
                    payload: { text: value },
                },
            ],
        });
    }
    async reset() {
        await this.client.deleteCollection(this.collectionName);
        await this.client.createCollection(this.collectionName, {
            vectors: {
                size: 384,
                distance: "Cosine",
            },
        });
    }
    async saveDocs(values) {
        const vectors = await this.embedTexts(values);
        const points = values.map((value, index) => ({
            id: Math.random().toString(36).substring(7),
            vector: vectors[index],
            payload: { text: value },
        }));
        await this.client.upsert(this.collectionName, {
            points,
        });
    }
    async embedTexts(text) {
        return this.embeddings.embedTexts(text);
    }
}
exports.QdrantStore = QdrantStore;
